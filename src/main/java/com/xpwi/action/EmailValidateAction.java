package com.xpwi.action;import com.xpwi.service.IUserService;import org.apache.commons.mail.SimpleEmail;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpSession;import java.util.*;@Controller@Scope("prototype")@RequestMapping("/email")public class EmailValidateAction {    @Autowired    IUserService userServiceImpl;    //邮箱验证    @RequestMapping(value = "/sendCode.do", method = RequestMethod.POST)    @ResponseBody    public int emailValidate(String userEmail, HttpSession session) {        //创建一个SimpleEmail实例对象        SimpleEmail email = new SimpleEmail();        //定义一个验证码        String code = achieveCode();        //定义一个返回的 Map        try {            //QQ邮箱服务器            email.setHostName("smtp.qq.com");            email.setCharset("utf-8");            //设置收件人            email.addTo(userEmail);            //设置发送人邮箱，和用户名            email.setFrom("2770666860@qq.com", "xpwi");            //配置邮箱加授权码，相当于等于自己的邮箱            email.setAuthentication("2770666860@qq.com", "bsfbvzpdbzusdeje");            email.setSSLOnConnect(true); //使用安全链接            email.setSubject("【软通网盘】登录验证码");//设置邮件的主题            //设置邮件的内容            email.setMsg("尊敬的用户：您好!\n 登录验证码为：" + code + "\n" + "【有效期为一分钟】");            email.send();//发送        } catch (Exception e) {            e.printStackTrace();            return 0;        }        System.out.println("【验证码已发送】" + code);        session.setAttribute("userEmailCode", code);        return 1;    }    // 随机验证码    public String achieveCode() {  //由于数字 1 、 0 和字母 O 、l 有时分不清楚，所以，没有数字 1 、 0        String[] beforeShuffle = new String[]{"2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F",                "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a",                "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v",                "w", "x", "y", "z"};        List list = Arrays.asList(beforeShuffle);//将数组转换为集合        Collections.shuffle(list);  //打乱集合顺序        StringBuilder sb = new StringBuilder();        for (int i = 0; i < list.size(); i++) {            sb.append(list.get(i)); //将集合转化为字符串        }        return sb.toString().substring(3, 7);  //截取字符串第4到8    }    //登录验证    @RequestMapping(value = "/loginByEmail.do", method = RequestMethod.POST)    @ResponseBody    public Map<String,String> loginByEmail(String userEmail, String emailCode, HttpSession session) {        System.out.println("【邮箱登录】" + userEmail + "-" + emailCode);        System.out.println("session code-" + session.getAttribute("userEmailCode"));        String userEmailCode = session.getAttribute("userEmailCode").toString();        System.out.println("【邮箱验证码判断】"+emailCode.equalsIgnoreCase(userEmailCode));        Map map = new HashMap();        if (emailCode.equalsIgnoreCase(userEmailCode)) {            Map<String, Object> loginByEmail = userServiceImpl.findUserByEmail(userEmail);            System.out.println(userEmail + "," + emailCode + "," + loginByEmail);            if (loginByEmail == null) {                System.out.println("login为空");                map.put("loginCode", 0);                return map;            } else {                map.put("loginCode", 1);                map.put("user_id", loginByEmail.get("user_id").toString());                map.put("username", loginByEmail.get("username").toString());                map.put("user_type", loginByEmail.get("user_type").toString());                map.put("status", loginByEmail.get("status").toString());                //session 存一下 id                session.setAttribute("userid", loginByEmail.get("user_id").toString());                //判断数据库返回的 login 中 head 不为空                if (loginByEmail.get("head") != null || loginByEmail.get("head").toString() != "") {                    map.put("headPath", loginByEmail.get("head").toString());                    System.out.println("【" + loginByEmail.get("username") + " 登录成功】");                } else {                    //判断数据库返回的 login 中 head 为空                    map.put("headPath", "myphoto/myphoto.jpg");                }            }        }else {            map.put("loginCode",0);        }        System.out.println("1111");        return map;    }}